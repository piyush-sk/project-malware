# K NEAREST NEIGHBOUR
# Importing the libraries
from sklearn.metrics import plot_roc_curve 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import joblib 
#def pred(a):
 #   if a==0:
 #        return str("BENIGN")
  #  else:
   #      return str("MALICIOUS")
                
# Importing the dataset
dataset = pd.read_csv("MSGmalware_analysis_dataset_if.csv", delimiter=",")
#d = pd.read_csv("train_file2.csv", delimiter=",")

# split into input (X) and output (Y) variables
#d1= d.iloc[:, :357].values 

X = dataset.iloc[:, 1:358].values
y = dataset.iloc[:, 358].values
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, 
                                                    random_state = 0)
# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
#d1 = sc.transform(d1)

# Fitting KNN to the Training set
from sklearn.neighbors import KNeighborsClassifier
classifier= KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)
# Predicting the Accuracy
from sklearn.metrics import accuracy_score
accuracy=accuracy_score(y_test, y_pred)
print("ACCURACY")
print(accuracy)
# Forming the Confusion Matrix
print("confusion_matrix")
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
# Forming the classification report
print("CLASSIFICATION_REPORT")
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))
print(classification_report(y_test, y_pred))
knn_disp = plot_roc_curve(classifier, X_test, y_test)
plt.show()
#y_o = classifier.predict(d1)
#print(y_o)
#st=pred(y_o)
#print(st)
joblib.dump(classifier,'joblid_knn.pkl' )
#loaded_model=joblib.load('joblid_randomforest.pkl')
#y_oo=loaded_model.predict(d1)
#print(pred(y_oo))
#pred(y_o)