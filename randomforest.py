# Random Forest Classification
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import joblib 
from sklearn.metrics import plot_roc_curve 
from sklearn.metrics import roc_curve, auc
# Importing the dataset
dataset = pd.read_csv("MSGmalware_analysis_dataset_if.csv", delimiter=",")
#d = pd.read_csv("train_file2.csv", delimiter=",")

# split into input (X) and output (Y) variables
#d1= d.iloc[:, :357].values 

X = dataset.iloc[:, 1:358].values
y = dataset.iloc[:, 358].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, 
                                                    random_state = 0)
# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
#d1 = sc.transform(d1)

# Fitting Random Forest Classification to the Training set
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Predicting the Accuracy
from sklearn.metrics import accuracy_score
accuracy=accuracy_score(y_test, y_pred)
print("ACCURACY")
print(accuracy)

# Forming the Confusion Matrix
print("confusion_matrix")
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

# Forming the classification report
print("CLASSIFICATION_REPORT")
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))
probas = classifier.predict_proba(X_test)

# get false and true positive rates
fpr, tpr, thresholds = roc_curve(y_test, probas[:,0], pos_label=0)
# get area under the curve
roc_auc = auc(fpr, tpr)
print(roc_auc)
plt.figure(dpi=150)
plt.plot(fpr, tpr, lw=1, color='green', label=f'AUC = {roc_auc:.3f}')
plt.title('ROC Curve for RF classifier')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate (Recall)')
plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.legend()
plt.show()
#print(classification_report(y_test, y_pred))
#rf_disp = plot_roc_curve(classifier, X_test, y_test)
#plt.show()
#y_o = classifier.predict(d1)
#print(y_o)
#st=pred(y_o)
#print(st)
# Dumping the model
joblib.dump(classifier,'joblid_randomforest.pkl' )
#loaded_model=joblib.load('joblid_randomforest.pkl')
#y_oo=loaded_model.predict(d1)
#print(pred(y_oo))
#pred(y_o)