import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import plot_roc_curve
from sklearn.metrics import roc_curve, auc
from sklearn import metrics
from sklearn.calibration import CalibratedClassifierCV
df = pd.read_csv("MSGmalware_analysis_dataset_if.csv", delimiter=',')
df['malware'].value_counts()
X=df.iloc[:, 1:358].values
y=df.iloc[:,358].values


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, 
                                                    random_state = 0)


from sklearn.neighbors import KNeighborsClassifier
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier


svc=svm.SVC(kernel='linear', gamma='auto', C=2, probability=True )
svc.fit(X_train, y_train)



rfc = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
rfc.fit(X_train, y_train)



knc= KNeighborsClassifier(n_neighbors=5)
knc.fit(X_train, y_train)

probas = rfc.predict_proba(X_test)
probas1=knc.predict_proba(X_test)
probas2=svc.predict_proba(X_test)
# get false and true positive rates
fpr, tpr, thresholds = roc_curve(y_test, probas[:,0], pos_label=0)
fpr1, tpr1, thresholds1 = roc_curve(y_test, probas1[:,0], pos_label=0)
fpr2, tpr2, thresholds2 = roc_curve(y_test, probas2[:,0], pos_label=0)
# get area under the curve
roc_auc = auc(fpr, tpr)
roc_auc1=auc(fpr1,tpr1)
roc_auc2=auc(fpr2,tpr2)
#print(roc_auc)
plt.figure(dpi=150)
plt.plot(fpr, tpr, lw=1, color='green', label=f'RFC-AUC = {roc_auc:.3f}')
plt.plot(fpr1, tpr1, lw=1, color='yellow', label=f'KNN-AUC = {roc_auc1:.3f}')
plt.plot(fpr2, tpr2, lw=1, color='pink', label=f'SVM-AUC = {roc_auc1:.3f}')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate (Recall)')
plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.legend()




plt.show()

#svc_disp = plot_roc_curve(svc, X_test, y_test)
#plt.show()

#ax = plt.gca()

#rfc_disp = plot_roc_curve(rfc, X_test, y_test,ax=ax, alpha=0.8)
#svc_disp.plot(ax=ax, alpha=0.8)
#plt.show()

#bx=plt.gca()
#knc_disp = plot_roc_curve(knc, X_test, y_test,ax=ax, alpha=0.8)
#svc_disp.plot(ax=bx, alpha=0.8 )
#plt.show()
